import {
    Connection,
    Keypair,
    clusterApiUrl,
    LAMPORTS_PER_SOL,
    PublicKey,
    sendAndConfirmTransaction,
    Transaction
} from "@solana/web3.js";
import {
    getKeypairFromEnvironment,
    getExplorerLink,
} from "@solana-developers/helpers";
import {
    createMint,
    getOrCreateAssociatedTokenAccount,
    mintTo,
    TOKEN_PROGRAM_ID,
} from "@solana/spl-token";
import { createCreateMetadataAccountV3Instruction } from "@metaplex-foundation/mpl-token-metadata";

const fs = require("fs")

function load_local_wallet(filename: string) {
    const secretKey = JSON.parse(fs.readFileSync(filename).toString());
    return Keypair.fromSecretKey(new Uint8Array(secretKey));
}

async function main() {
    // const proxyUrl = "http://172.17.112.1:7890"; // ‰Ω†ÁöÑ‰ª£ÁêÜÂú∞ÂùÄ
    const connection = new Connection("https://devnet.helius-rpc.com/?api-key=c833cd62-5224-46f0-8895-969d3f66f44c", "confirmed");
    // const connection = new Connection("http://127.0.0.1:8899", "confirmed");
    console.log("‚úÖ - ËøûÊé•Âà∞ Solana devnet");

    // 2. ÁîüÊàêÂØÜÈí•ÂØπÔºàpayer/mintAuthority/owner ÂèØ‰ª•ÊòØÂêå‰∏Ä‰∏™Ë¥¶Êà∑Ôºâ
    // const payer = Keypair.generate();

    const payer = load_local_wallet("/home/kenijima/.config/solana/id.json");
    const mintAuthority = payer;
    const owner = payer;
    const freezeAuthority = payer;

    console.log("‚úÖ - ÁîüÊàêÂØÜÈí•ÂØπ");
    console.log("     Payer ÂÖ¨Èí•:", payer.publicKey.toBase58());

    const payer_balance = await connection.getBalance(payer.publicKey);
    console.log("üí∞ - Payer Ë¥¶Êà∑‰ΩôÈ¢ù:", payer_balance / LAMPORTS_PER_SOL, "SOL");

    // 3. Áªô payer Á©∫Êäï SOLÔºà‰ªÖÈôê devnet/testnetÔºâ
    console.log("ü™Ç - Áî≥ËØ∑Á©∫Êäï...");
    // const airdropSignature = await connection.requestAirdrop(
    //     payer.publicKey,
    //     2 * LAMPORTS_PER_SOL // 1 SOL
    // );
    console.log("‚úÖ - Á©∫ÊäïÊàêÂäü");

    console.log("‚è≥ - Á≠âÂæÖÁ©∫ÊäïÂà∞Ë¥¶...");
    await new Promise((resolve) => setTimeout(resolve, 5000)); // Á≠âÂæÖ 5 Áßí

    // const payer_balance = await connection.getBalance(payer.publicKey);
    // console.log("üí∞ - Payer Ë¥¶Êà∑‰ΩôÈ¢ù:", payer_balance / LAMPORTS_PER_SOL, "SOL");

    // 4. ÂàõÂª∫‰ª£Â∏ÅÈì∏Â∏ÅË¥¶Êà∑ÔºàToken MintÔºâ
    console.log("üõ†Ô∏è - ÂàõÂª∫‰ª£Â∏ÅÈì∏Â∏ÅË¥¶Êà∑...");
    const mint = await createMint(
        connection,
        payer, // ÊîØ‰ªò‰∫§ÊòìË¥πÁî®ÁöÑË¥¶Êà∑
        mintAuthority.publicKey, // Èì∏Â∏ÅÊùÉÈôêÁöÑÂÖ¨Èí•ÔºàmintAuthorityÔºâ
        freezeAuthority.publicKey, // ÂÜªÁªìÊùÉÈôêÔºàËÆæ‰∏∫ null Ë°®Á§∫‰∏çÈúÄË¶ÅÔºâ
        9 // ‰ª£Â∏ÅÁöÑÂ∞èÊï∞Á≤æÂ∫¶Ôºà‰æãÂ¶Ç 9 Ë°®Á§∫ 1 token = 1_000_000_000 ‰∏™ÊúÄÂ∞èÂçï‰ΩçÔºâ
    );
    console.log("‚úÖ - ‰ª£Â∏ÅÈì∏Â∏ÅË¥¶Êà∑Âú∞ÂùÄ:", mint.toBase58());

    // 5. ÂàõÂª∫ÂÖ≥ËÅî‰ª£Â∏ÅË¥¶Êà∑ÔºàATAÔºâ
    console.log("üõ†Ô∏è - ÂàõÂª∫ÂÖ≥ËÅî‰ª£Â∏ÅË¥¶Êà∑ (ATA) ...");
    const ata = await getOrCreateAssociatedTokenAccount(
        connection,
        payer, // ÊîØ‰ªò‰∫§ÊòìË¥πÁî®ÁöÑË¥¶Êà∑
        mint, // ‰ª£Â∏ÅÈì∏Â∏ÅÂú∞ÂùÄ
        owner.publicKey // ‰ª£Â∏ÅÊé•Êî∂ËÄÖÔºàownerÔºâÁöÑÂÖ¨Èí•
    );
    console.log("‚úÖ - ATA Âú∞ÂùÄ:", ata.address.toBase58());

    // 6. Èì∏ÈÄ†‰ª£Â∏ÅÂà∞ ATA
    console.log("ü™ô - Èì∏ÈÄ†‰ª£Â∏Å...");
    const mintAmount = 100 * 10 ** 9; // Èì∏ÈÄ† 100 ‰∏™‰ª£Â∏ÅÔºàËÄÉËôë 9 ‰ΩçÂ∞èÊï∞Ôºâ
    const mintTxSignature = await mintTo(
        connection,
        payer, // ÊîØ‰ªò‰∫§ÊòìË¥πÁî®ÁöÑË¥¶Êà∑
        mint, // ‰ª£Â∏ÅÈì∏Â∏ÅÂú∞ÂùÄ
        ata.address, // ÁõÆÊ†á ATA Âú∞ÂùÄ
        payer, // Èì∏Â∏ÅÊùÉÈôêÁöÑÂØÜÈí•ÂØπÔºàÂøÖÈ°ªÊã•ÊúâÈì∏Â∏ÅÊùÉÈôêÔºâ
        mintAmount // Èì∏ÈÄ†Êï∞Èáè
    );
    console.log("‚úÖ - ‰ª£Â∏ÅÈì∏ÈÄ†ÊàêÂäüÔºå‰∫§ÊòìÂìàÂ∏å:", mintTxSignature);

    // 7. Êü•ËØ¢‰ª£Â∏Å‰ΩôÈ¢ù
    const balance = await connection.getTokenAccountBalance(ata.address);
    console.log("üí∞ - ‰ª£Â∏Å‰ΩôÈ¢ù:", balance.value.uiAmount, "tokens");
}

// main().catch((err) => {
//     console.error("‚ùå - ÂèëÁîüÈîôËØØ:", err);
// });

// ‰∏∫‰ª£Â∏ÅÊ∑ªÂä†ÂÖÉÊï∞ÊçÆÔºö
addMetaData(new PublicKey("Ez7JneJvwSz1yZfH5aTgZvUsaZMGoetmpoFrzq8BsH9M")).catch((err) => {
    console.error("‚ùå - ÂèëÁîüÈîôËØØ:", err);
});

async function addMetaData(mint: PublicKey) {
    const payer = load_local_wallet("/home/kenijima/.config/solana/id.json");
    const connection = new Connection("https://devnet.helius-rpc.com/?api-key=c833cd62-5224-46f0-8895-969d3f66f44c", "confirmed");

    console.log(
        `üîë We've loaded our keypair securely, using an env file! Our public key is: ${payer.publicKey.toBase58()}`,
    );

    const transaction = new Transaction();

    const createMetadataAccountInstruction = await constructMetadataInstruction(mint);

    transaction.add(createMetadataAccountInstruction);
    const transactionSignature = await sendAndConfirmTransaction(
        connection,
        transaction,
        [payer],
    );

    const transactionLink = getExplorerLink(
        "transaction",
        transactionSignature,
        "devnet",
    );

    console.log(`‚úÖ Transaction confirmed, explorer link is: ${transactionLink}`);

    const tokenMintLink = getExplorerLink(
        "address",
        mint.toString(),
        "devnet",
    );

    console.log(`‚úÖ Look at the token mint again: ${tokenMintLink}`);

}

async function constructMetadataInstruction(mint: PublicKey) {
    const payer = load_local_wallet("/home/kenijima/.config/solana/id.json");
    console.log(
        `üîë We've loaded our keypair securely, using an env file! Our public key is: ${payer.publicKey.toBase58()}`,
    );
    const TOKEN_METADATA_PROGRAM_ID = new PublicKey(
        "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
    );

    const metadataData = {
        name: "Naruto Token",
        symbol: "NAT",
        // Arweave / IPFS / Pinata etc link using metaplex standard for offchain data
        uri: "https://upload.wikimedia.org/wikipedia/zh/6/61/Naruto_20160925.jpg",
        sellerFeeBasisPoints: 0,
        creators: null,
        collection: null,
        uses: null,
    };

    const metadataPDAAndBump = PublicKey.findProgramAddressSync(
        [
            Buffer.from("metadata"),
            TOKEN_METADATA_PROGRAM_ID.toBuffer(),
            mint.toBuffer(),
        ],
        TOKEN_METADATA_PROGRAM_ID,
    );

    const metadataPDA = metadataPDAAndBump[0];

    const createMetadataAccountInstruction =
        createCreateMetadataAccountV3Instruction(
            {
                metadata: metadataPDA,
                mint,
                mintAuthority: payer.publicKey,
                payer: payer.publicKey,
                updateAuthority: payer.publicKey,
            },
            {
                createMetadataAccountArgsV3: {
                    collectionDetails: null,
                    data: metadataData,
                    isMutable: true,
                },
            },
        );

    return createMetadataAccountInstruction;
}

module.exports = {
    load_local_wallet
};